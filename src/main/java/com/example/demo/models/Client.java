package com.example.demo.models;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Client Value Object.
  * This class is value object representing database table Client
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Client implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int clientId;
    private String city;
    private String street;
    private Integer phoneNumber;
    private String gender;
    private String lname;
    private String fname;
    private Integer employeeId;
    private String organisation;
    private String userName;
    private String password;
    private String confirmPassword;


    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Client () {

    }

    public Client (int clientIdIn) {

          this.clientId = clientIdIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getClientId() {
          return this.clientId;
    }
    public void setClientId(int clientIdIn) {
          this.clientId = clientIdIn;
    }

    public String getCity() {
          return this.city;
    }
    public void setCity(String cityIn) {
          this.city = cityIn;
    }

    public String getStreet() {
          return this.street;
    }
    public void setStreet(String streetIn) {
          this.street = streetIn;
    }

    public Integer getPhoneNumber() {
          return this.phoneNumber;
    }
    public void setPhoneNumber(Integer phoneNumberIn) {
          this.phoneNumber = phoneNumberIn;
    }

    public String getGender() {
          return this.gender;
    }
    public void setGender(String genderIn) {
          this.gender = genderIn;
    }

    public String getLname() {
          return this.lname;
    }
    public void setLname(String lnameIn) {
          this.lname = lnameIn;
    }

    public String getFname() {
          return this.fname;
    }
    public void setFname(String fnameIn) {
          this.fname = fnameIn;
    }

    public Integer getEmployeeId() {
          return this.employeeId;
    }
    public void setEmployeeId(Integer employeeIdIn) {
          this.employeeId = employeeIdIn;
    }

    public String getOrganisation() {
          return this.organisation;
    }
    public void setOrganisation(String organisationIn) {
          this.organisation = organisationIn;
    }
    public String getUserName() {
      return this.userName;
}
public void setUserName(String userNameIn) {
      this.userName = userNameIn;
}

public String getPassword() {
      return this.password;
}
public String getConfirmPassword() {
      return this.confirmPassword;
}
public void setPassword(String passwordIn) {
      this.password = passwordIn;
}
public void setConfirmPassword(String confirmPasswordIn) {
      this.confirmPassword = confirmPasswordIn;
}



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int clientIdIn,
          String cityIn,
          String streetIn,
          Integer phoneNumberIn,
          String genderIn,
          String lnameIn,
          String fnameIn,
          Integer employeeIdIn,
          String organisationIn) {
          this.clientId = clientIdIn;
          this.city = cityIn;
          this.street = streetIn;
          this.phoneNumber = phoneNumberIn;
          this.gender = genderIn;
          this.lname = lnameIn;
          this.fname = fnameIn;
          this.employeeId = employeeIdIn;
          this.organisation = organisationIn;
    }


    /** 
     * hasEqualMapping-method will compare two Client instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Client valueObject) {

          if (valueObject.getClientId() != this.clientId) {
                    return(false);
          }
          if (this.city == null) {
                    if (valueObject.getCity() != null)
                           return(false);
          } else if (!this.city.equals(valueObject.getCity())) {
                    return(false);
          }
          if (this.street == null) {
                    if (valueObject.getStreet() != null)
                           return(false);
          } else if (!this.street.equals(valueObject.getStreet())) {
                    return(false);
          }
          if (this.phoneNumber == null) {
                    if (valueObject.getPhoneNumber() != null)
                           return(false);
          } else if (!this.phoneNumber.equals(valueObject.getPhoneNumber())) {
                    return(false);
          }
          if (this.gender == null) {
                    if (valueObject.getGender() != null)
                           return(false);
          } else if (!this.gender.equals(valueObject.getGender())) {
                    return(false);
          }
          if (this.lname == null) {
                    if (valueObject.getLname() != null)
                           return(false);
          } else if (!this.lname.equals(valueObject.getLname())) {
                    return(false);
          }
          if (this.fname == null) {
                    if (valueObject.getFname() != null)
                           return(false);
          } else if (!this.fname.equals(valueObject.getFname())) {
                    return(false);
          }
          if (this.employeeId == null) {
                    if (valueObject.getEmployeeId() != null)
                           return(false);
          } else if (!this.employeeId.equals(valueObject.getEmployeeId())) {
                    return(false);
          }
          if (this.organisation == null) {
                    if (valueObject.getOrganisation() != null)
                           return(false);
          } else if (!this.organisation.equals(valueObject.getOrganisation())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Client, mapping to table Client\n");
        out.append("Persistent attributes: \n"); 
        out.append("clientId = " + this.clientId + "\n"); 
        out.append("city = " + this.city + "\n"); 
        out.append("street = " + this.street + "\n"); 
        out.append("phoneNumber = " + this.phoneNumber + "\n"); 
        out.append("gender = " + this.gender + "\n"); 
        out.append("lname = " + this.lname + "\n"); 
        out.append("fname = " + this.fname + "\n"); 
        out.append("employeeId = " + this.employeeId + "\n"); 
        out.append("organisation = " + this.organisation + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Client cloned = new Client();

        cloned.setClientId(this.clientId); 
        if (this.city != null)
             cloned.setCity(new String(this.city)); 
        if (this.street != null)
             cloned.setStreet(new String(this.street)); 
        if (this.phoneNumber != null)
             cloned.setPhoneNumber(new Integer(this.phoneNumber.intValue())); 
        if (this.gender != null)
             cloned.setGender(new String(this.gender)); 
        if (this.lname != null)
             cloned.setLname(new String(this.lname)); 
        if (this.fname != null)
             cloned.setFname(new String(this.fname)); 
        if (this.employeeId != null)
             cloned.setEmployeeId(new Integer(this.employeeId.intValue())); 
        if (this.organisation != null)
             cloned.setOrganisation(new String(this.organisation)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}